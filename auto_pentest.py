#!/usr/bin/env python3
import subprocess
import sys
import os
import urllib.parse
from datetime import datetime

def banner():
    print("\n\033[1;34m" + "="*60)
    print("     🔍 Unified Pentest Scanner (Nmap + SQLMap)")
    print("="*60 + "\033[0m")

def get_domain(url):
    parsed = urllib.parse.urlparse(url)
    return parsed.netloc or parsed.path  # if no scheme provided

def run_command(command, desc):
    print(f"\n\033[1;33m[+] Running {desc}...\033[0m")
    try:
        output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT, text=True)
        print(f"\033[0;32m[✔] {desc} completed.\033[0m")
        return output
    except subprocess.CalledProcessError as e:
        print(f"\033[0;31m[✘] Error running {desc}\033[0m\n{e.output}")
        return f"{desc} failed.\n{e.output}"

def save_output(tool, output, folder):
    file_path = os.path.join(folder, f"{tool}_output.txt")
    with open(file_path, "w") as f:
        f.write(output)
    return file_path

def print_section(title, content):
    print("\n\033[1;35m" + "-"*60)
    print(f"🔎 {title}")
    print("-"*60 + "\033[0m")
    print(content)

def main():
    banner()
    if len(sys.argv) != 2:
        print("Usage: python3 pentest_suite.py <URL>")
        sys.exit(1)

    url = sys.argv[1]
    domain = get_domain(url)
    report_folder = f"report_{domain}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    os.makedirs(report_folder, exist_ok=True)

    # Nmap
    nmap_output = run_command(f"nmap -sV -Pn {domain}", "Nmap Port Scan")
    nmap_path = save_output("nmap", nmap_output, report_folder)
    print_section("Nmap Results", nmap_output)

    # SQLMap
    sqlmap_output = run_command(f"sqlmap -u \"{url}\" --batch --level=2 --risk=1", "SQLMap Scan")
    sqlmap_path = save_output("sqlmap", sqlmap_output, report_folder)
    print_section("SQLMap Results", sqlmap_output)

       # Final Summary
    print("\n\033[1;36m[+] Scan Complete. Reports saved in:\033[0m", report_folder)
    print(f"\033[1;36m├── {nmap_path}\n├── {sqlmap_path}\033[0m\n")

if __name__ == "__main__":
    main()
